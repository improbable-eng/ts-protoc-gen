// source: proto/examplecom/repeated_primitive_message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.examplecom.RepeatedPrimitiveMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examplecom.RepeatedPrimitiveMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.examplecom.RepeatedPrimitiveMessage.repeatedFields_, null);
};
goog.inherits(proto.examplecom.RepeatedPrimitiveMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.examplecom.RepeatedPrimitiveMessage.displayName = 'proto.examplecom.RepeatedPrimitiveMessage';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.examplecom.RepeatedPrimitiveMessage.repeatedFields_ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.examplecom.RepeatedPrimitiveMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examplecom.RepeatedPrimitiveMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examplecom.RepeatedPrimitiveMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    myDoubleList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    myFloatList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    myInt32List: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    myInt64List: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    myUint32List: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    myUint64List: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    mySint32List: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    mySint64List: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    myFixed32List: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    myFixed64List: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    mySfixed32List: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
    mySfixed64List: (f = jspb.Message.getRepeatedField(msg, 12)) == null ? undefined : f,
    myBoolList: (f = jspb.Message.getRepeatedBooleanField(msg, 13)) == null ? undefined : f,
    myStringList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    myBytesList: msg.getMyBytesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage}
 */
proto.examplecom.RepeatedPrimitiveMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examplecom.RepeatedPrimitiveMessage;
  return proto.examplecom.RepeatedPrimitiveMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examplecom.RepeatedPrimitiveMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage}
 */
proto.examplecom.RepeatedPrimitiveMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMyDouble(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMyFloat(values[i]);
      }
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMyInt32(values[i]);
      }
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMyInt64(values[i]);
      }
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMyUint32(values[i]);
      }
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMyUint64(values[i]);
      }
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedSint32() : [reader.readSint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMySint32(values[i]);
      }
      break;
    case 8:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedSint64() : [reader.readSint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMySint64(values[i]);
      }
      break;
    case 9:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFixed32() : [reader.readFixed32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMyFixed32(values[i]);
      }
      break;
    case 10:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFixed64() : [reader.readFixed64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMyFixed64(values[i]);
      }
      break;
    case 11:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedSfixed32() : [reader.readSfixed32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMySfixed32(values[i]);
      }
      break;
    case 12:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedSfixed64() : [reader.readSfixed64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMySfixed64(values[i]);
      }
      break;
    case 13:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMyBool(values[i]);
      }
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addMyString(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addMyBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examplecom.RepeatedPrimitiveMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examplecom.RepeatedPrimitiveMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examplecom.RepeatedPrimitiveMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyDoubleList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
  f = message.getMyFloatList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
  f = message.getMyInt32List();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
  f = message.getMyInt64List();
  if (f.length > 0) {
    writer.writePackedInt64(
      4,
      f
    );
  }
  f = message.getMyUint32List();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = message.getMyUint64List();
  if (f.length > 0) {
    writer.writePackedUint64(
      6,
      f
    );
  }
  f = message.getMySint32List();
  if (f.length > 0) {
    writer.writePackedSint32(
      7,
      f
    );
  }
  f = message.getMySint64List();
  if (f.length > 0) {
    writer.writePackedSint64(
      8,
      f
    );
  }
  f = message.getMyFixed32List();
  if (f.length > 0) {
    writer.writePackedFixed32(
      9,
      f
    );
  }
  f = message.getMyFixed64List();
  if (f.length > 0) {
    writer.writePackedFixed64(
      10,
      f
    );
  }
  f = message.getMySfixed32List();
  if (f.length > 0) {
    writer.writePackedSfixed32(
      11,
      f
    );
  }
  f = message.getMySfixed64List();
  if (f.length > 0) {
    writer.writePackedSfixed64(
      12,
      f
    );
  }
  f = message.getMyBoolList();
  if (f.length > 0) {
    writer.writePackedBool(
      13,
      f
    );
  }
  f = message.getMyStringList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
  f = message.getMyBytesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      15,
      f
    );
  }
};


/**
 * repeated double my_double = 1;
 * @return {!Array<number>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMyDoubleList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.setMyDoubleList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.addMyDouble = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.clearMyDoubleList = function() {
  return this.setMyDoubleList([]);
};


/**
 * repeated float my_float = 2;
 * @return {!Array<number>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMyFloatList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.setMyFloatList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.addMyFloat = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.clearMyFloatList = function() {
  return this.setMyFloatList([]);
};


/**
 * repeated int32 my_int32 = 3;
 * @return {!Array<number>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMyInt32List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.setMyInt32List = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.addMyInt32 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.clearMyInt32List = function() {
  return this.setMyInt32List([]);
};


/**
 * repeated int64 my_int64 = 4;
 * @return {!Array<number>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMyInt64List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.setMyInt64List = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.addMyInt64 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.clearMyInt64List = function() {
  return this.setMyInt64List([]);
};


/**
 * repeated uint32 my_uint32 = 5;
 * @return {!Array<number>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMyUint32List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.setMyUint32List = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.addMyUint32 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.clearMyUint32List = function() {
  return this.setMyUint32List([]);
};


/**
 * repeated uint64 my_uint64 = 6;
 * @return {!Array<number>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMyUint64List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.setMyUint64List = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.addMyUint64 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.clearMyUint64List = function() {
  return this.setMyUint64List([]);
};


/**
 * repeated sint32 my_sint32 = 7;
 * @return {!Array<number>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMySint32List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.setMySint32List = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.addMySint32 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.clearMySint32List = function() {
  return this.setMySint32List([]);
};


/**
 * repeated sint64 my_sint64 = 8;
 * @return {!Array<number>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMySint64List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.setMySint64List = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.addMySint64 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.clearMySint64List = function() {
  return this.setMySint64List([]);
};


/**
 * repeated fixed32 my_fixed32 = 9;
 * @return {!Array<number>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMyFixed32List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.setMyFixed32List = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.addMyFixed32 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.clearMyFixed32List = function() {
  return this.setMyFixed32List([]);
};


/**
 * repeated fixed64 my_fixed64 = 10;
 * @return {!Array<number>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMyFixed64List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.setMyFixed64List = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.addMyFixed64 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.clearMyFixed64List = function() {
  return this.setMyFixed64List([]);
};


/**
 * repeated sfixed32 my_sfixed32 = 11;
 * @return {!Array<number>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMySfixed32List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.setMySfixed32List = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.addMySfixed32 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.clearMySfixed32List = function() {
  return this.setMySfixed32List([]);
};


/**
 * repeated sfixed64 my_sfixed64 = 12;
 * @return {!Array<number>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMySfixed64List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 12));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.setMySfixed64List = function(value) {
  return jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.addMySfixed64 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.clearMySfixed64List = function() {
  return this.setMySfixed64List([]);
};


/**
 * repeated bool my_bool = 13;
 * @return {!Array<boolean>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMyBoolList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 13));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.setMyBoolList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.addMyBool = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.clearMyBoolList = function() {
  return this.setMyBoolList([]);
};


/**
 * repeated string my_string = 14;
 * @return {!Array<string>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMyStringList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.setMyStringList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.addMyString = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.clearMyStringList = function() {
  return this.setMyStringList([]);
};


/**
 * repeated bytes my_bytes = 15;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMyBytesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 15));
};


/**
 * repeated bytes my_bytes = 15;
 * This is a type-conversion wrapper around `getMyBytesList()`
 * @return {!Array<string>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMyBytesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getMyBytesList()));
};


/**
 * repeated bytes my_bytes = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMyBytesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.getMyBytesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getMyBytesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.setMyBytesList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.addMyBytes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.examplecom.RepeatedPrimitiveMessage} returns this
 */
proto.examplecom.RepeatedPrimitiveMessage.prototype.clearMyBytesList = function() {
  return this.setMyBytesList([]);
};


goog.object.extend(exports, proto.examplecom);

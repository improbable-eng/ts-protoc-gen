/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.examplecom.PrimitiveMessageV3', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examplecom.PrimitiveMessageV3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examplecom.PrimitiveMessageV3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examplecom.PrimitiveMessageV3.displayName = 'proto.examplecom.PrimitiveMessageV3';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examplecom.PrimitiveMessageV3.prototype.toObject = function(opt_includeInstance) {
  return proto.examplecom.PrimitiveMessageV3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examplecom.PrimitiveMessageV3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examplecom.PrimitiveMessageV3.toObject = function(includeInstance, msg) {
  var f, obj = {
    myDouble: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    myFloat: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    myInt32: jspb.Message.getFieldWithDefault(msg, 3, 0),
    myInt64: jspb.Message.getFieldWithDefault(msg, 4, 0),
    myUint32: jspb.Message.getFieldWithDefault(msg, 5, 0),
    myUint64: jspb.Message.getFieldWithDefault(msg, 6, 0),
    mySint32: jspb.Message.getFieldWithDefault(msg, 7, 0),
    mySint64: jspb.Message.getFieldWithDefault(msg, 8, 0),
    myFixed32: jspb.Message.getFieldWithDefault(msg, 9, 0),
    myFixed64: jspb.Message.getFieldWithDefault(msg, 10, 0),
    mySfixed32: jspb.Message.getFieldWithDefault(msg, 11, 0),
    mySfixed64: jspb.Message.getFieldWithDefault(msg, 12, 0),
    myBool: jspb.Message.getFieldWithDefault(msg, 13, false),
    myString: jspb.Message.getFieldWithDefault(msg, 14, ""),
    myBytes: msg.getMyBytes_asB64(),
    myNumber: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examplecom.PrimitiveMessageV3}
 */
proto.examplecom.PrimitiveMessageV3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examplecom.PrimitiveMessageV3;
  return proto.examplecom.PrimitiveMessageV3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examplecom.PrimitiveMessageV3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examplecom.PrimitiveMessageV3}
 */
proto.examplecom.PrimitiveMessageV3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMyDouble(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMyFloat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMyInt32(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMyInt64(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMyUint32(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMyUint64(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setMySint32(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setMySint64(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMyFixed32(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setMyFixed64(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readSfixed32());
      msg.setMySfixed32(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setMySfixed64(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMyBool(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyString(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMyBytes(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMyNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examplecom.PrimitiveMessageV3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examplecom.PrimitiveMessageV3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examplecom.PrimitiveMessageV3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examplecom.PrimitiveMessageV3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyDouble();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getMyFloat();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getMyInt32();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMyInt64();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMyUint32();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMyUint64();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMySint32();
  if (f !== 0) {
    writer.writeSint32(
      7,
      f
    );
  }
  f = message.getMySint64();
  if (f !== 0) {
    writer.writeSint64(
      8,
      f
    );
  }
  f = message.getMyFixed32();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
  f = message.getMyFixed64();
  if (f !== 0) {
    writer.writeFixed64(
      10,
      f
    );
  }
  f = message.getMySfixed32();
  if (f !== 0) {
    writer.writeSfixed32(
      11,
      f
    );
  }
  f = message.getMySfixed64();
  if (f !== 0) {
    writer.writeSfixed64(
      12,
      f
    );
  }
  f = message.getMyBool();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getMyString();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getMyBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = message.getMyNumber();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
};


/**
 * optional double my_double = 1;
 * @return {number}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMyDouble = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMyDouble = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float my_float = 2;
 * @return {number}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMyFloat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMyFloat = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 my_int32 = 3;
 * @return {number}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMyInt32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMyInt32 = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 my_int64 = 4;
 * @return {number}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMyInt64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMyInt64 = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 my_uint32 = 5;
 * @return {number}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMyUint32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMyUint32 = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 my_uint64 = 6;
 * @return {number}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMyUint64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMyUint64 = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional sint32 my_sint32 = 7;
 * @return {number}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMySint32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMySint32 = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional sint64 my_sint64 = 8;
 * @return {number}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMySint64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMySint64 = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional fixed32 my_fixed32 = 9;
 * @return {number}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMyFixed32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMyFixed32 = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional fixed64 my_fixed64 = 10;
 * @return {number}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMyFixed64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMyFixed64 = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional sfixed32 my_sfixed32 = 11;
 * @return {number}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMySfixed32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMySfixed32 = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional sfixed64 my_sfixed64 = 12;
 * @return {number}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMySfixed64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMySfixed64 = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bool my_bool = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMyBool = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMyBool = function(value) {
  jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional string my_string = 14;
 * @return {string}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMyString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMyString = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bytes my_bytes = 15;
 * @return {!(string|Uint8Array)}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMyBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes my_bytes = 15;
 * This is a type-conversion wrapper around `getMyBytes()`
 * @return {string}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMyBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMyBytes()));
};


/**
 * optional bytes my_bytes = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMyBytes()`
 * @return {!Uint8Array}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMyBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMyBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMyBytes = function(value) {
  jspb.Message.setProto3BytesField(this, 15, value);
};


/**
 * optional int32 my_NUMBER = 16;
 * @return {number}
 */
proto.examplecom.PrimitiveMessageV3.prototype.getMyNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.examplecom.PrimitiveMessageV3.prototype.setMyNumber = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


goog.object.extend(exports, proto.examplecom);

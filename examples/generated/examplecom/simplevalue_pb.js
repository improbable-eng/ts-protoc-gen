/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.examplecom.SimpleValue', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examplecom.SimpleValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.examplecom.SimpleValue.oneofGroups_);
};
goog.inherits(proto.examplecom.SimpleValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examplecom.SimpleValue.displayName = 'proto.examplecom.SimpleValue';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.examplecom.SimpleValue.oneofGroups_ = [[3,6,8],[4,5,7]];

/**
 * @enum {number}
 */
proto.examplecom.SimpleValue.KindCase = {
  KIND_NOT_SET: 0,
  NUMBER_VALUE: 3,
  STRING_VALUE: 6,
  BOOL_VALUE: 8
};

/**
 * @return {proto.examplecom.SimpleValue.KindCase}
 */
proto.examplecom.SimpleValue.prototype.getKindCase = function() {
  return /** @type {proto.examplecom.SimpleValue.KindCase} */(jspb.Message.computeOneofCase(this, proto.examplecom.SimpleValue.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.examplecom.SimpleValue.AnotherCase = {
  ANOTHER_NOT_SET: 0,
  NUMBER2_VALUE: 4,
  STRING2_VALUE: 5,
  BOOL2_VALUE: 7
};

/**
 * @return {proto.examplecom.SimpleValue.AnotherCase}
 */
proto.examplecom.SimpleValue.prototype.getAnotherCase = function() {
  return /** @type {proto.examplecom.SimpleValue.AnotherCase} */(jspb.Message.computeOneofCase(this, proto.examplecom.SimpleValue.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examplecom.SimpleValue.prototype.toObject = function(opt_includeInstance) {
  return proto.examplecom.SimpleValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examplecom.SimpleValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examplecom.SimpleValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstField: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secondField: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numberValue: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    stringValue: jspb.Message.getFieldWithDefault(msg, 6, ""),
    boolValue: jspb.Message.getFieldWithDefault(msg, 8, false),
    number2Value: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    string2Value: jspb.Message.getFieldWithDefault(msg, 5, ""),
    bool2Value: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examplecom.SimpleValue}
 */
proto.examplecom.SimpleValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examplecom.SimpleValue;
  return proto.examplecom.SimpleValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examplecom.SimpleValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examplecom.SimpleValue}
 */
proto.examplecom.SimpleValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstField(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSecondField(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNumberValue(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNumber2Value(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setString2Value(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBool2Value(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examplecom.SimpleValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examplecom.SimpleValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examplecom.SimpleValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examplecom.SimpleValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstField();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecondField();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string first_field = 1;
 * @return {string}
 */
proto.examplecom.SimpleValue.prototype.getFirstField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examplecom.SimpleValue.prototype.setFirstField = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 second_field = 2;
 * @return {number}
 */
proto.examplecom.SimpleValue.prototype.getSecondField = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.examplecom.SimpleValue.prototype.setSecondField = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double number_value = 3;
 * @return {number}
 */
proto.examplecom.SimpleValue.prototype.getNumberValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.examplecom.SimpleValue.prototype.setNumberValue = function(value) {
  jspb.Message.setOneofField(this, 3, proto.examplecom.SimpleValue.oneofGroups_[0], value);
};


proto.examplecom.SimpleValue.prototype.clearNumberValue = function() {
  jspb.Message.setOneofField(this, 3, proto.examplecom.SimpleValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examplecom.SimpleValue.prototype.hasNumberValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string string_value = 6;
 * @return {string}
 */
proto.examplecom.SimpleValue.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.examplecom.SimpleValue.prototype.setStringValue = function(value) {
  jspb.Message.setOneofField(this, 6, proto.examplecom.SimpleValue.oneofGroups_[0], value);
};


proto.examplecom.SimpleValue.prototype.clearStringValue = function() {
  jspb.Message.setOneofField(this, 6, proto.examplecom.SimpleValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examplecom.SimpleValue.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool bool_value = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.examplecom.SimpleValue.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.examplecom.SimpleValue.prototype.setBoolValue = function(value) {
  jspb.Message.setOneofField(this, 8, proto.examplecom.SimpleValue.oneofGroups_[0], value);
};


proto.examplecom.SimpleValue.prototype.clearBoolValue = function() {
  jspb.Message.setOneofField(this, 8, proto.examplecom.SimpleValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examplecom.SimpleValue.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double number2_value = 4;
 * @return {number}
 */
proto.examplecom.SimpleValue.prototype.getNumber2Value = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.examplecom.SimpleValue.prototype.setNumber2Value = function(value) {
  jspb.Message.setOneofField(this, 4, proto.examplecom.SimpleValue.oneofGroups_[1], value);
};


proto.examplecom.SimpleValue.prototype.clearNumber2Value = function() {
  jspb.Message.setOneofField(this, 4, proto.examplecom.SimpleValue.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examplecom.SimpleValue.prototype.hasNumber2Value = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string string2_value = 5;
 * @return {string}
 */
proto.examplecom.SimpleValue.prototype.getString2Value = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.examplecom.SimpleValue.prototype.setString2Value = function(value) {
  jspb.Message.setOneofField(this, 5, proto.examplecom.SimpleValue.oneofGroups_[1], value);
};


proto.examplecom.SimpleValue.prototype.clearString2Value = function() {
  jspb.Message.setOneofField(this, 5, proto.examplecom.SimpleValue.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examplecom.SimpleValue.prototype.hasString2Value = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool bool2_value = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.examplecom.SimpleValue.prototype.getBool2Value = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.examplecom.SimpleValue.prototype.setBool2Value = function(value) {
  jspb.Message.setOneofField(this, 7, proto.examplecom.SimpleValue.oneofGroups_[1], value);
};


proto.examplecom.SimpleValue.prototype.clearBool2Value = function() {
  jspb.Message.setOneofField(this, 7, proto.examplecom.SimpleValue.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examplecom.SimpleValue.prototype.hasBool2Value = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.examplecom);

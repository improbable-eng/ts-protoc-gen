"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var primitive_message_v3_pb_1 = require("../generated/examplecom/primitive_message_v3_pb");
describe("proto3 - primitive", function () {
    it("should allow getting primitive fields", function () {
        var msg = new primitive_message_v3_pb_1.PrimitiveMessageV3();
        chai_1.assert.strictEqual(msg.getMyDouble(), 0);
        chai_1.assert.strictEqual(msg.getMyFloat(), 0);
        chai_1.assert.strictEqual(msg.getMyInt32(), 0);
        chai_1.assert.strictEqual(msg.getMyInt64(), 0);
        chai_1.assert.strictEqual(msg.getMyUint32(), 0);
        chai_1.assert.strictEqual(msg.getMyUint64(), 0);
        chai_1.assert.strictEqual(msg.getMySint32(), 0);
        chai_1.assert.strictEqual(msg.getMySint64(), 0);
        chai_1.assert.strictEqual(msg.getMyFixed32(), 0);
        chai_1.assert.strictEqual(msg.getMyFixed64(), 0);
        chai_1.assert.strictEqual(msg.getMySfixed32(), 0);
        chai_1.assert.strictEqual(msg.getMySfixed64(), 0);
        chai_1.assert.strictEqual(msg.getMyBool(), false);
        chai_1.assert.strictEqual(msg.getMyString(), "");
        chai_1.assert.strictEqual(msg.getMyBytes(), "");
    });
    it("should allow setting and getting primitive fields", function () {
        var msg = new primitive_message_v3_pb_1.PrimitiveMessageV3();
        msg.setMyDouble(123);
        chai_1.assert.strictEqual(msg.getMyDouble(), 123);
        msg.setMyFloat(123);
        chai_1.assert.strictEqual(msg.getMyFloat(), 123);
        msg.setMyInt32(123);
        chai_1.assert.strictEqual(msg.getMyInt32(), 123);
        msg.setMyInt64(123);
        chai_1.assert.strictEqual(msg.getMyInt64(), 123);
        msg.setMyUint32(123);
        chai_1.assert.strictEqual(msg.getMyUint32(), 123);
        msg.setMyUint64(123);
        chai_1.assert.strictEqual(msg.getMyUint64(), 123);
        msg.setMySint32(123);
        chai_1.assert.strictEqual(msg.getMySint32(), 123);
        msg.setMySint64(123);
        chai_1.assert.strictEqual(msg.getMySint64(), 123);
        msg.setMyFixed32(123);
        chai_1.assert.strictEqual(msg.getMyFixed32(), 123);
        msg.setMyFixed64(123);
        chai_1.assert.strictEqual(msg.getMyFixed64(), 123);
        msg.setMySfixed32(123);
        chai_1.assert.strictEqual(msg.getMySfixed32(), 123);
        msg.setMySfixed64(123);
        chai_1.assert.strictEqual(msg.getMySfixed64(), 123);
        msg.setMyBool(true);
        chai_1.assert.strictEqual(msg.getMyBool(), true);
        msg.setMyString("hello world");
        chai_1.assert.strictEqual(msg.getMyString(), "hello world");
        msg.setMyBytes("AAECAwQFBgcICQ==");
        chai_1.assert.strictEqual(msg.getMyBytes(), "AAECAwQFBgcICQ==");
    });
    it("should allow setting and getting byte values", function () {
        var asUint8Array = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
        var asString = "AAECAwQFBgcICQ==";
        var msg = new primitive_message_v3_pb_1.PrimitiveMessageV3();
        msg.setMyBytes(asString);
        chai_1.assert.deepEqual(msg.getMyBytes_asU8(), asUint8Array);
        chai_1.assert.deepEqual(msg.getMyBytes_asB64(), asString);
        chai_1.assert.deepEqual(msg.getMyBytes(), asString);
        msg.setMyBytes(asUint8Array);
        chai_1.assert.deepEqual(msg.getMyBytes_asB64(), asString);
        chai_1.assert.deepEqual(msg.getMyBytes_asU8(), asUint8Array);
        chai_1.assert.deepEqual(msg.getMyBytes(), asUint8Array);
    });
    describe("toObject", function () {
        it("should indicate potentially undefined primitive fields", function () {
            var msg = new primitive_message_v3_pb_1.PrimitiveMessageV3();
            var asObject = msg.toObject();
            chai_1.assert.strictEqual(asObject.myDouble, 0);
            chai_1.assert.strictEqual(asObject.myFloat, 0);
            chai_1.assert.strictEqual(asObject.myInt32, 0);
            chai_1.assert.strictEqual(asObject.myInt64, 0);
            chai_1.assert.strictEqual(asObject.myUint32, 0);
            chai_1.assert.strictEqual(asObject.myUint64, 0);
            chai_1.assert.strictEqual(asObject.mySint32, 0);
            chai_1.assert.strictEqual(asObject.mySint64, 0);
            chai_1.assert.strictEqual(asObject.myFixed32, 0);
            chai_1.assert.strictEqual(asObject.myFixed64, 0);
            chai_1.assert.strictEqual(asObject.mySfixed32, 0);
            chai_1.assert.strictEqual(asObject.mySfixed64, 0);
            chai_1.assert.strictEqual(asObject.myBool, false);
            chai_1.assert.strictEqual(asObject.myString, "");
            chai_1.assert.strictEqual(asObject.myBytes, "");
        });
        it("should camelcase fully-capitalized field names", function () {
            var msg = new primitive_message_v3_pb_1.PrimitiveMessageV3();
            var asObject = msg.toObject();
            chai_1.assert.strictEqual("myNumber" in asObject, true);
        });
    });
});
//# sourceMappingURL=primitivesV3.js.map